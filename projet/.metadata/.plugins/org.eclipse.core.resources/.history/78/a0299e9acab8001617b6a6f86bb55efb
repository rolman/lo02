package Joueur;

import java.util.Iterator;
import java.util.LinkedList;

import jeu.Carte;
import jeu.Croyant;

import java.util.Scanner;

import Divinite.Divinite;
import Plateau.Partie;
import Plateau.Pioche;
import Plateau.Plateau;

public class Joueur implements Participants {
	private static final Class<?> Croyant = null;
	private static final Class<?> GuideSpirituel = null;
	private int pointAction;
	private String nom;
	private LinkedList<Carte> main;
	private Divinite type;

	public LinkedList<Carte> getMain() {
		return main;
	}

	public void setMain(LinkedList<Carte> main) {
		this.main = main;
	}

	public void voirMain() {
		int position = 0;
		for (Iterator it = main.iterator(); it.hasNext();) {

			Carte carte = (Carte) it.next();
			System.out.println(position + "  " + carte.getNom() + "     " + java.util.Arrays.toString(carte.getDogmes()));
			position++;
		}

	}

	public String getNom() {
		return nom;
	}

	public void setNom(String nom) {
		this.nom = nom;
	}

	public Divinite getType() {
		return type;
	}

	public void setType(Divinite nouvType) {
		this.type = nouvType;
	}

	public Joueur(Divinite nomDiv, int numeroJoueur) {
		main = new LinkedList<>();
		this.type = nomDiv;
		StringBuffer sb = new StringBuffer();
		sb.append("Joueur réel ");
		sb.append(numeroJoueur);
		this.nom = sb.toString();
		for (int i = 0; i < 7; i++) {
			this.main.add(Pioche.getInstance().tirerCarteDuDessus());
		}

		for (Iterator it = main.iterator(); it.hasNext();) {

			Carte carte = (Carte) it.next();

		}
	}

	@Override
	public void Jouer() {

		System.out.println(this.nom + " C'est à vous appuyez sur entré pour commencer votre tour");
		Scanner touche = new Scanner(System.in);
		touche.nextLine();
		System.out.println();
		System.out.println("Voici les actions que vous pouvez effectuer : ");
		System.out.println("[1] - Vous défausser de tout ou partie de vos cartes");
		System.out.println("[2] - Compléter votre main à 7 cartes");
		System.out.println(
				"[3] - Jouer les deux phases suivantes afin d'utiliser des cartes d'action et/ou sacrifier une carte Croyant ou Guide Spirituel");
		System.out.println();
		System.out.println("Votre choix ?");
		Scanner sc = new Scanner(System.in);
		int choix;
		boolean accepte = false;
		do {
			do {
				System.out.println("Vous devez choisir entre les propositions !");
				choix = sc.nextInt();
			} while (choix != 1 && choix != 2 && choix != 3);

			switch (choix) {
			case 1:
				accepte = aDefausse();
				break;
			case 2:
				accepte = aPioche();
				break;
			case 3: 
				accepte = aJoue();
				break;
			}
			if (accepte == false) {
				System.out.println("Cette action n'est pas disponible, en choisir une autre");
			}
		} while (accepte == false);
		// int resultat = joueurDe.lancerDe(this);
		// System.out.println("Vous avez gagné " + resultat + "point(s)");
	}

	public int getPointAction() {
		return pointAction;
	}

	public void ajoutPointAction(int pointAction) {
		this.pointAction += pointAction;
	}

	public boolean aPioche() {

		if (main.size() < 7) {
			do {
				main.add(Pioche.getInstance().tirerCarteDuDessus());
				Pioche.getInstance().voirPioche();
			} while (main.size() < 7);

			return true;
		} else {
			return false;
		}
	}

	public boolean aDefausse() {
		if (main.size() > 0) {
			System.out
					.println("Vous pouvez vous défausser de " + main.size() + " cartes maximum, faites votre choix :");
			Scanner sc = new Scanner(System.in);
			int choix = sc.nextInt();
			for (int i = 0; i <= choix; i++) {
				System.out.println("Vous avez enlevé " + i + " cartes sur " + choix);
				this.voirMain();
				System.out.println(
						"Quelle est le numéro de la carte à retirer (à coté du nom de votre carte dans votre main)?");
				
				int numeroCarte;
				numeroCarte = sc.nextInt();
				Pioche.getInstance().defausser(main.remove(numeroCarte));
			}

			return true;
		} else {
			return false;
		}
	}
	
	
	public boolean comparaisonDogme(Carte carte1,Carte carte2){
		for(int i = 0;i<5;i++){
			if(carte1.getDogmes(i)==carte2.getDogmes(i)){
				return true;
			}
		}
		return false;
		
	}

	public boolean aJoue() {
		if (main.size() > 0) {
			System.out.println(
					"Entrez le numéro de la carte à jouer (à coté du nom de votre carte dans votre main) entrez -1 si vous ne voulez pas jouer de carte");
			this.voirMain();
			Scanner sc = new Scanner(System.in);
			int choix1 = sc.nextInt();
			if (choix1 != -1) {
				
				if((main.get(choix1) instanceof jeu.GuideSpirituel)){
					if(Plateau.getInstance().getTasDeCartesTable().size() >= main.get(choix1).getNbDeCroyantsPouvantEtreGuides()){
						for(int j=0;j<main.get(choix1).getNbDeCroyantsPouvantEtreGuides();j++){
						System.out.println("Quelle carte du plateau souhaitez-vous guider ? (" + j +"/"+ main.get(choix1).getNbDeCroyantsPouvantEtreGuides()+")");
						Plateau.getInstance().voirPlateau();
						int guide = sc.nextInt();
						boolean correspondance = comparaisonDogme(main.get(choix1),Plateau.getInstance().getTasDeCartesTable().get(guide));
						if(correspondance == true){
						main.get(choix1).ajoutCroyantGuide(Plateau.getInstance().getTasDeCartesTable().remove(guide));
						}
						else{
							System.out.println("Aucune correspondance entre les dogmes, action impossible.");
						}
						
						}
						main.remove(choix1);
					}
						else{
							System.out.println("Il n'y a pas assez de cartes à guider");
						}
					
				}
				else{
					Plateau.getInstance().poserCarte(main.remove(choix1));
				}
				
				
				
			}
			
			/*int choix2;
			
			do{
			System.out.println("Entrez le numéro de la carte croyant ou guide spirituel à sacrifier (à coté du nom de votre carte dans votre main) entrez -1 si vous ne voulez pas jouer de carte");
			choix2 = sc.nextInt();
			
			
			//TODO PB ici il faut recupérer la classe pour vérifier si ce sont bien des croyants ou guides spirituels.
					}while(!(main.get(choix2) instanceof jeu.Croyant) && !(main.get(choix2) instanceof jeu.GuideSpirituel));
			if (choix1 != -1) {
				Plateau.getInstance().poserCarte(main.remove(choix1));
				
			}*/
		}
		return true;
}
}
